extern crate alloc;

#[cfg(feature = "postgres")]
mod tests {
    use super::*;
    use chrono::{TimeZone, Utc};
    use fuel_gql_client::client::{FuelClient, PageDirection, PaginationRequest};
    use fuel_core::database::Database;
    use fuel_core::{
        model::fuel_block::FuelBlock,
        schema::scalars::HexString256,
        service::{Config, FuelService},
    };
    use fuel_indexer::types::*;
    use fuel_storage::Storage;
<<<<<<< Updated upstream
    use fuel_tx::Receipt;
=======
    use fuels_rs::abi_encoder::ABIEncoder;
>>>>>>> Stashed changes
    use fuel_vm::{consts::*, prelude::*};
    use fuel_wasm_executor::{IndexerService, IndexExecutor, Manifest, SchemaManager};

    const DATABASE_URL: &'static str = "postgres://postgres:my-secret@127.0.0.1:5432";
    const GRAPHQL_SCHEMA: &'static str = include_str!("./test_data/demo_schema.graphql");
    const MANIFEST: &'static str = include_str!("./test_data/demo_manifest.yaml");
    const WASM_BYTES: &'static [u8] = include_bytes!("./test_data/indexer_demo.wasm");

    fn create_log_transaction(rega: u16, regb: u16) -> fuel_tx::Transaction {
        let script = vec![
            Opcode::ADDI(0x10, REG_ZERO, rega),
            Opcode::ADDI(0x11, REG_ZERO, regb),
            Opcode::LOG(0x10, 0x11, REG_ZERO, REG_ZERO),
            Opcode::LOG(0x11, 0x12, REG_ZERO, REG_ZERO),
            Opcode::LOG(0x12, 0x13, REG_ZERO, REG_ZERO),
            Opcode::LOG(0x13, 0x14, REG_ZERO, REG_ZERO),
            Opcode::RET(REG_ONE),
        ]
        .iter()
        .copied()
        .collect::<Vec<u8>>();

        let gas_price = 0;
        let gas_limit = 1_000_000;
        let maturity = 0;
        fuel_tx::Transaction::script(
            gas_price,
            gas_limit,
            maturity,
            script,
            vec![],
            vec![],
            vec![],
            vec![],
        )
    }

    #[tokio::test]
    async fn test_blocks() {

        let srv = FuelService::new_node(Config::local_node()).await.unwrap();
        let client = FuelClient::from(srv.bound_address);
        // submit tx
        let _ = client.submit(&create_log_transaction(0xca, 0xba)).await;
        let _ = client.submit(&create_log_transaction(0xfa, 0x4f)).await;
        let _ = client.submit(&create_log_transaction(0x33, 0x11)).await;
        let mut indexer_service = IndexerService::new(srv.bound_address, DATABASE_URL.to_string()).unwrap();

        let manifest: Manifest = serde_yaml::from_str(MANIFEST).expect("Bad yaml file");
        indexer_service.add_indexer(manifest, GRAPHQL_SCHEMA, WASM_BYTES).expect("Failed to initialize indexer");

<<<<<<< Updated upstream
        // run test
        let blocks = client
            .blocks(PaginationRequest {
                cursor: None,
                results: 5,
                direction: PageDirection::Backward,
            })
            .await
            .unwrap();

        for block in blocks.results {
            for trans in block.transactions {
                //let tx = fuel_tx::Transaction::try_from(trans).expect("Bad transaction");

                if let Some(receipts) = trans.receipts {
                    for receipt in receipts {
                        let rec = Receipt::try_from(receipt).expect("Bad receipt");
                        match rec {
                            Receipt::Log { id, ra, rb, rc, rd, pc, is, } => println!("Log {:?} {:?} {:?} {:?} {:?} {:?} {:?}", id, ra, rb, rc, rd, pc, is),
                            Receipt::Return { id, val, pc, is, } => println!("Return {:?} {:?} {:?} {:?}", id, val, pc, is),
                            Receipt::ScriptResult { result, gas_used, } => println!("ScriptResult {:?} {:?}", result, gas_used),
                            o => panic!("Danggittt {:?}", o),
                        }
                        // TODO: Other receipt types:
                        //Call { id: ContractId, to: ContractId, amount: Word, color: Color, gas: Word, a: Word, b: Word, pc: Word, is: Word, },
                        //ReturnData { id: ContractId, ptr: Word, len: Word, digest: Bytes32, data: Vec<u8>, pc: Word, is: Word, },
                        //Panic { id: ContractId, reason: Word, pc: Word, is: Word, },
                        //Revert { id: ContractId, ra: Word, pc: Word, is: Word, },
                        //LogData { id: ContractId, ra: Word, rb: Word, ptr: Word, len: Word, digest: Bytes32, data: Vec<u8>, pc: Word, is: Word, },
                        //Transfer { id: ContractId, to: ContractId, amount: Word, color: Color, pc: Word, is: Word, },
                        //TransferOut { id: ContractId, to: Address, amount: Word, color: Color, pc: Word, is: Word, },
                    }
                }
            }
        }
        assert!(false);
=======
        indexer_service.run().await;
>>>>>>> Stashed changes
    }
}
